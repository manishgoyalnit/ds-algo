// g++ hello.cpp -o hello & hello
#include<bits/stdc++.h>
#include<iostream>
using namespace std;

void buildtree(int *arr,int ss,int se,int *tree,int index)
{
if(se==ss)
{
tree[index]=arr[se];
return;	
}
int mid=(ss+se)/2;
buildtree(arr,ss,mid,tree,2*index);
buildtree(arr,mid+1,se,tree,2*index+1);
tree[index]=min(tree[2*index+1],tree[2*index]);
return;
}
int query(int *tree,int ss,int se,int l,int r,int index)
{
if(ss>=l && se<=r)return tree[index]; 
if(ss>r || se<l)return INT_MAX;
int mid=(ss+se)/2;
int l1=query(tree,ss,mid,l,r,2*index);
int r1=query(tree,mid+1,se,l,r,2*index+1);
return min(l1,r1);
}

void updateNode(int *tree,int ss,int se,int i,int increment,int index)
{
if(i<ss || i>se)
return;
if(ss==se)
{
	tree[index]+=increment;
return;
}
int mid=(ss+se)/2;
updateNode(tree,ss,mid,i,increment,2*index);
updateNode(tree,mid+1,se,i,increment,2*index+1);
tree[index]=min(tree[2*index],tree[2*index+1]);
return ;

}

void rangeupdate(int *tree,int ss,int se,int l,int r,int increment,int index)
{
if(se<l || ss>r)return;
if(ss==se){ tree[index]+=increment;
	return;
	}
int mid=(ss+se)/2;
rangeupdate(tree,ss,mid,l,r,increment,2*index);

rangeupdate(tree,mid+1,se,l,r,increment,2*index+1);
tree[index]=min(tree[2*index],tree[2*index+1]);
return ;

}
int main()
{
freopen("input.in","r",stdin);freopen("output.in","w",stdout);
int arr[]={1,3,2,-5,7,5};
int n=sizeof(arr)/sizeof(int);
int *tree=new int[4*n+1];
buildtree(arr,0,n-1,tree,1);
for(int i=1;i<14;i++)
cout<<tree[i]<<" ";
cout<<endl;
updateNode(tree,0,n-1,3,2,1);
for(int i=0;i<3;i++)
{int l,r;
cin>>l>>r;
cout<<query(tree,0,n-1,l,r,1)<<endl;
}

return 0;

}
