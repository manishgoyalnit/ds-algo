#include<bits/stdc++.h>

using namespace std;


 // } Driver Code Ends

/* This function is used to detect a cycle in undirected graph
*  adj[]: array of vectors to represent graph
*  V: number of vertices
*/
bool dfs(int s,vector<int> adj[],bool vis[],int n,int par)
{
    vis[s]=true;
    for(auto x: adj[s])
    {if(vis[x]==false)
        {if(dfs(x,adj,vis,n,s)==true)
            return true;
        }
        else if(par!=x)
        return true;
    }
    return false;
}
bool isCyclic(vector<int> adj[], int n)
{
bool  vis[n+1]={} ;   
    
for(int i=0;i<n;i++)    
{if(!vis[i])
    if(dfs(i,adj,vis,n,-1)==true)
    return true;
}
   // Your code here
   return false;
}


// { Driver Code Starts.

int main()
{
    int T;
    cin>>T;
    while(T--)
    {
        int V, E;
        cin>>V>>E;
        
        // array of vectors to represent graph
        vector<int> adj[V];
        
        int u, v;
        for(int i=0;i<E;i++)
        {
            cin>>u>>v;
            
            // adding edge to the graph
            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        cout << isCyclic(adj, V)<<endl;

    }
}
  // } Driver Code Ends
