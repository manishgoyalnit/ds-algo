

 // } Driver Code Ends
/*  Function to check if the given graph contains cycle
*   V: number of vertices
*   adj[]: representation of graph
*/

bool dfs(vector<int> adj[],int s,bool vis[],bool rec[])
{vis[s]=true;
rec[s]=true;    
    for(auto x : adj[s])
    {if(!vis[x] && dfs(adj,x,vis,rec)) 
        return true;
        else if(rec[x]==true)
        return true;
        
    }
    rec[s]=false;
    return false;
}
bool isCyclic(int v, vector<int> adj[])
{
    bool vis[v+1]={false};
bool rec[v+1]={false};
for(int i=0;i<v;i++)    
    {if(!vis[i])
        {if(dfs(adj,i,vis,rec)==true)
            return true;
        }
    }
return false;
}


// { Driver Code Starts.

int main() {
	
	int t;
	cin >> t;
	
	while(t--){
	    
	    int v, e;
	    cin >> v >> e;
	    
	    vector<int> adj[v];
	    
	    for(int i =0;i<e;i++){
	        int u, v;
	        cin >> u >> v;
	        adj[u].push_back(v);
	    }
	    
	    cout << isCyclic(v, adj) << endl;
	    
	}
	
	return 0;
}  // } Driver Code Ends
